// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@Bean should add Bean metadata to a class when decorated multiple times with @Bean 1`] = `
Array [
  Object {
    "id": "test",
    "key": "testMethod",
  },
  Object {
    "id": "test3",
    "key": "test2Method",
  },
  Object {
    "id": "test2",
    "key": "test2Method",
  },
]
`;

exports[`@Bean should add Bean metadata to a class when decorated with @Bean 1`] = `
Array [
  Object {
    "id": "test",
    "key": "testMethod",
  },
  Object {
    "id": "test2",
    "key": "test2Method",
  },
]
`;

exports[`@Config should add Registry and config metadata to a class when decorated with @Config 1`] = `true`;

exports[`@Config should add Registry and config metadata to a class when decorated with @Config 2`] = `
Object {
  "type": "ConfigType",
  "value": Object {
    "id": [Function],
    "options": Object {
      "order": 150,
    },
    "target": [Function],
  },
}
`;

exports[`@Config should add Registry and config metadata to a class when decorated with @Config(100) 1`] = `true`;

exports[`@Config should add Registry and config metadata to a class when decorated with @Config(100) 2`] = `
Object {
  "type": "ConfigType",
  "value": Object {
    "id": [Function],
    "options": Object {
      "order": 100,
    },
    "target": [Function],
  },
}
`;

exports[`@CoreConfig should add Registry and config metadata to a class when decorated with @CoreConfig 1`] = `true`;

exports[`@CoreConfig should add Registry and config metadata to a class when decorated with @CoreConfig 2`] = `
Object {
  "type": "ConfigType",
  "value": Object {
    "id": [Function],
    "options": Object {
      "order": 50,
    },
    "target": [Function],
  },
}
`;

exports[`@CoreConfig should add Registry and config metadata to a class when decorated with @CoreConfig(100) 1`] = `true`;

exports[`@CoreConfig should add Registry and config metadata to a class when decorated with @CoreConfig(100) 2`] = `
Object {
  "type": "ConfigType",
  "value": Object {
    "id": [Function],
    "options": Object {
      "order": 100,
    },
    "target": [Function],
  },
}
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin('TestPlugin') 1`] = `
Object {
  "dependencies": Array [],
  "name": "TestPlugin",
}
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin() 1`] = `
Object {
  "dependencies": Array [],
  "name": "TestBean",
}
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin({ dependencies: ['TestPlugin'] }) 1`] = `
Object {
  "dependencies": Array [
    Object {
      "name": "TestPlugin",
      "order": "after",
    },
  ],
  "name": "TestBean",
}
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin({ name: 'TestPlugin' }) 1`] = `
Object {
  "dependencies": Array [],
  "name": "TestPlugin",
}
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin({ name: 'TestPlugin', dependencies: ['TestPlugin2'] }) 1`] = `
Object {
  "dependencies": Array [
    Object {
      "name": "TestPlugin2",
      "order": "after",
    },
  ],
  "name": "TestPlugin",
}
`;

exports[`@PluginConfig should add Registry and config metadata to a class when decorated with @PluginConfig 1`] = `true`;

exports[`@PluginConfig should add Registry and config metadata to a class when decorated with @PluginConfig 2`] = `
Object {
  "type": "ConfigType",
  "value": Object {
    "id": [Function],
    "options": Object {
      "order": 100,
    },
    "target": [Function],
  },
}
`;

exports[`@PluginConfig should add Registry and config metadata to a class when decorated with @PluginConfig(100) 1`] = `true`;

exports[`@PluginConfig should add Registry and config metadata to a class when decorated with @PluginConfig(100) 2`] = `
Object {
  "type": "ConfigType",
  "value": Object {
    "id": [Function],
    "options": Object {
      "order": 100,
    },
    "target": [Function],
  },
}
`;

exports[`@Register should add Registry metadata to a class when decorated with @Register 1`] = `
Object {
  "type": "ConfigType",
  "value": Object {
    "id": [Function],
    "target": [Function],
  },
}
`;

exports[`@Scan should add Scan metadata to a class when decorated multiple times with @Scan 1`] = `
Array [
  "<PROJECT_ROOT>/__tests__/otherFolder",
  "<PROJECT_ROOT>/__tests__",
]
`;

exports[`@Scan should add Scan metadata to a class when decorated with @Scan() 1`] = `
Array [
  "<PROJECT_ROOT>/__tests__",
]
`;

exports[`@Scan should add Scan metadata to a class when decorated with @Scan(__dirname) 1`] = `
Array [
  "<PROJECT_ROOT>/__tests__",
]
`;

exports[`@Scan should add Scan metadata to a class when decorated with @Scan(relativePath) 1`] = `
Array [
  "<PROJECT_ROOT>/__tests__/fixtures/loader",
]
`;

exports[`@Scan should add Scan metadata to a class when decorated with @Scan(relativePath) 2 1`] = `
Array [
  "<PROJECT_ROOT>/src",
]
`;

exports[`@Service should add Service metadata to a class when decorated with @Service 1`] = `true`;

exports[`@Service should add Service metadata to a class when decorated with @Service 2`] = `
Object {
  "type": "ServiceType",
  "value": Object {
    "id": [Function],
    "target": [Function],
  },
}
`;

exports[`@Service should add Service metadata to a class when decorated with @Service('Test) 1`] = `true`;

exports[`@Service should add Service metadata to a class when decorated with @Service('Test) 2`] = `
Object {
  "type": "ServiceType",
  "value": Object {
    "id": "Test",
    "target": [Function],
  },
}
`;

exports[`@Value @Value(options: ValueOptions) should add Value metadata to a class when decorated with @Value(options: ValueOptions) 1`] = `
Array [
  Object {
    "key": "name",
    "path": "application.name",
    "target": TestBean {},
    "validator": null,
  },
  Object {
    "key": "surname",
    "path": "application.surname",
    "target": TestBean {},
    "validator": Object {
      "schema":  {
        "_description": null,
        "_examples": Array [],
        "_flags": Object {},
        "_inner": Object {},
        "_invalids": Set {
          "_set": Array [
            "",
          ],
        },
        "_meta": Array [],
        "_notes": Array [],
        "_refs": Array [],
        "_settings": null,
        "_tags": Array [],
        "_tests": Array [],
        "_type": "string",
        "_unit": null,
        "_valids": Set {
          "_set": Array [],
        },
        "isJoi": true,
      },
      "throwError": true,
    },
  },
  Object {
    "key": "firstname",
    "path": "application.surname",
    "target": TestBean {},
    "validator": Object {
      "schema":  {
        "_description": null,
        "_examples": Array [],
        "_flags": Object {},
        "_inner": Object {},
        "_invalids": Set {
          "_set": Array [
            "",
          ],
        },
        "_meta": Array [],
        "_notes": Array [],
        "_refs": Array [],
        "_settings": null,
        "_tags": Array [],
        "_tests": Array [],
        "_type": "string",
        "_unit": null,
        "_valids": Set {
          "_set": Array [],
        },
        "isJoi": true,
      },
      "throwError": true,
    },
  },
  Object {
    "key": "postalcode",
    "path": "application.postalcode",
    "target": TestBean {},
    "validator": Object {
      "customErrorMsg": "Error",
      "schema":  {
        "_baseType": undefined,
        "_description": null,
        "_examples": Array [],
        "_flags": Object {
          "presence": "required",
        },
        "_inner": Object {},
        "_invalids": Set {
          "_set": Array [
            "",
          ],
        },
        "_meta": Array [],
        "_notes": Array [],
        "_refs": Array [],
        "_settings": null,
        "_tags": Array [],
        "_tests": Array [],
        "_type": "string",
        "_unit": null,
        "_valids": Set {
          "_set": Array [],
        },
        "isJoi": true,
      },
      "throwError": true,
    },
  },
  Object {
    "key": "address",
    "path": "application.address",
    "target": TestBean {},
    "validator": Object {
      "schema":  {
        "_baseType": undefined,
        "_description": null,
        "_examples": Array [],
        "_flags": Object {
          "presence": "required",
        },
        "_inner": Object {},
        "_invalids": Set {
          "_set": Array [
            "",
          ],
        },
        "_meta": Array [],
        "_notes": Array [],
        "_refs": Array [],
        "_settings": null,
        "_tags": Array [],
        "_tests": Array [],
        "_type": "string",
        "_unit": null,
        "_valids": Set {
          "_set": Array [],
        },
        "isJoi": true,
      },
      "throwError": true,
    },
  },
]
`;
